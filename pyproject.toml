[build-system]
build-backend = "uv_build"
requires = [ "uv-build>=0.8.0,<0.9" ]

[project]
name = "dgpydev"
version = "0.1.0"
description = "dgpy-libs development"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Private :: Do Not Upload",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "dgpytest",
  "fmts",
  "funkify",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]

optional-dependencies.docs = [
  "importlib-metadata>=4.6; python_version<'3.10'",
  "markdown>=3.6",
  "markdown-callouts>=0.4",
  "mkdocs>=1.6",
  "mkdocs-autorefs>=1.4",
  "mkdocs-jupyter>=0.25.1",
  "mkdocs-material>=9.5.42",
  "mkdocs-material-extensions>=1.3.1",
  "mkdocstrings>=0.25.2",
  "mkdocstrings-python>=1.10.9",
  "pymdown-extensions>=6.3",
  "typing-extensions>=4.1; python_version<'3.10'",
]
scripts.dgpydev = "dgpydev.cli:main"

[tool.uv.build-backend]
module-name = "dgpydev"
module-root = ""

[dependency-groups]
dev = [
  "anyio>=4.6.2.post1",
  "httpx>=0.28.1",
  "ipython>=8.18.1",
  "mypy>=1.11.1",
  "nox>=2024.4.15",
  "orjson>=3.10.18",
  "pydantic>=2.11.5",
  "pytest-cov>=6.1.1",
  "rich>=13.9.3",
  "ruff>=0.11.7",
  "tomli>=2.0.1",
]

[tool.ruff]
target-version = "py39"

line-length = 88

lint.select = [
  "B",  # bugbear
  "C4", # comprehensions
  # pydocstyle
  "D",
  # "D207",   # docstring is under-indented
  # "D208",   # docstring is over-indented
  # "D414",
  # "D417",
  "E",      # pyflakes errors
  "ERA001", # erradicate
  "F",      # pyflakes warnings
  "FA102",  # require `from __future__ import annotations`
  "I",      # isort
  # pie (PIE)
  "PIE",
  "RUF022",
  "RUF100", # no unused 'noqa' comments
  # flake8-simplify (SIM)
  "SIM",

  # "SIM",
  # "PT", # pytest
  "T201", # print
  "TC",
  # pyupgrade
  "UP",
  "W",
  "ANN", # annotations
]
lint.ignore = [
  # "B004",
  # "B904",
"ANN401", # use of Any
  "C417", # super annoying
  "C901", # too complex
  # PYDOCSTYLE
  "D100", # undocumented-public-module
  "D101", # undocumented-public-class
  "D102", # undocumented-public-method
  "D103", # undocumented-public-function
  "D104", # undocumented-public-package
  "D105", # undocumented-magic-method
  "D107", # undocumented-public-init
  "D403", # first-line-capitalized
  "D415", # first line should end with a period/exclamation point
  # "E266", # too many leading '#' for block comment

  "FA",
  "E501", # line too long,
  # PIE
  "PIE804", # unnecessary-dict-kwargs -- TODO: revisit?
  "SIM105", # suppressible-exception
  # flake8-simplify (SIM)
  "SIM115", # open-file-with-context-handler
  "UP006",

  # PYUPGRADE
  # keep runtime typing
  "UP007",
  "UP009", # utf-8 encoding declaration (not needed but I am nostalgic)
  "UP022", # must test shellfish first...
  # "UP035", # unnecessary typing-extensions imports... must check xtying...
  # "UP037",
  "UP045", # union type over `Optional`
]

lint.per-file-ignores."**/conftest.py" = ["D"]
lint.per-file-ignores."**/noxfile.py" = ["D"]
lint.per-file-ignores."**/tests/*.py" = [
  "ANN401",  # use of Any
  "D1",
  "D100", # missing docstring in public module
  "D102",
  "D103", # missing docstring
]
lint.per-file-ignores."libs/xtyping/**/*.py" = [
  "UP007",
  "UP009", # utf-8 encoding declaration (not needed but I am nostalgic)
  "UP022", # must test shellfish first...
  "UP035",
  "UP037",
  "UP045", # union type over `Optional`
  "UP045", # union type over `Optional`
]
lint.per-file-ignores."*.ipynb" = ["E741", "F401", "F811", "F821", "T201", "ANN"]
lint.per-file-ignores."libs/jsonbourne/src/jsonbourne/trydantic.py" = [
  "I001", # isort something wrong with in try block import
]
lint.per-file-ignores."libs/requires/tests/test_requires.py" = [
  "F821", # undefined name; not valid for this test file
]
lint.per-file-ignores."libs/requires/tests/test_requires_w_json_libs.py" = [
  "F821", # undefined name; not valid for this test file
]
lint.per-file-ignores."libs/shellfish/tests/*" = [
  "D100", # missing docstring
]
lint.isort.combine-as-imports = true
lint.isort.known-first-party = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "dgpytest",
  "fmts",
  "funkify",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]

lint.isort.lines-after-imports = -1
lint.isort.lines-between-types = 1
lint.mccabe.max-complexity = 20
lint.pydocstyle.convention = "google"
lint.preview = true

[tool.codespell]
skip = "*/.nox/*,*/.nox_win/*,*/.pytype/*,*/.mypy_cache/*,*/.venv/*,*/node_modules/*,./poetry.lock"
ignore-words-list = "opps,te"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  "--disable-warnings",
]
testpaths = [
  "libs/src/aiopen",
  "libs/src/asyncify",
  "libs/src/dgpylibs",
  "libs/src/dgpytest",
  "libs/src/fmts",
  "libs/src/funkify",
  "libs/src/h5",
  "libs/src/jsonbourne",
  "libs/src/lager",
  "libs/src/listless",
  "libs/src/requires",
  "libs/src/shellfish",
  "libs/src/xtyping",
  "tests",
]

xfail_strict = true
filterwarnings = [
  "error",
  'ignore:"@coroutine" decorator is deprecated since Python 3\.8, use "async def" instead:DeprecationWarning',
  "ignore::RuntimeWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
  "ignore::DeprecationWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "timeout",
  "skip: skip test",
  "anyio: anyio tests",
  "aio: asyncio tests",
  "basic: basic tests",
  "version",
]
# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.9"
show_error_codes = true
follow_imports = 'silent'
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
ignore_missing_imports = true
implicit_reexport = false
strict = true
strict_equality = true
show_error_context = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_untyped_defs = true

[tool.pyright]
pythonVersion = "3.9"
include = [
  "libs/aiopen/src",
  "libs/asyncify/src",
  "libs/dgpylibs/src",
  "libs/dgpytest/src",
  "libs/fmts/src",
  "libs/funkify/src",
  "libs/h5/src",
  "libs/jsonbourne/src",
  "libs/lager/src",
  "libs/listless/src",
  "libs/requires/src",
  #    "libs/shellfish",
  "libs/listless/src",
  "libs/xtyping/src",
]
extraPaths = [
  "libs/aiopen/src",
  "libs/asyncify/src",
  "libs/funkify/src",
  "libs/fmts/src",
  "libs/h5/src",
  "libs/jsonbourne/src",
  "libs/lager/src",
  "libs/listless/src",
  "libs/requires/src",
  "libs/shellfish/src",
  "libs/listless/src",
  "libs/xtyping/src",
]
exclude = [
  "**/.pytype",
  "**/node_modules",
  "**/__pycache__",
  "docs",
  "**/.venv",
  "**/.nox",
  "**/.nox_win",
]
reportGeneralTypeIssues = false
reportInvalidTypeVarUse = false
reportMissingImports = true
reportMissingTypeStubs = false

[tool.uv.workspace]
members = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/dgpylibs",
  "libs/dgpytest",
  "libs/fmts",
  "libs/funkify",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  "libs/shellfish",
  "libs/xtyping",
]

[tool.uv.sources]
aiopen = { workspace = true }
asyncify = { workspace = true }
dgpylibs = { workspace = true }
dgpytest = { workspace = true }
fmts = { workspace = true }
funkify = { workspace = true }
h5 = { workspace = true }
jsonbourne = { workspace = true }
lager = { workspace = true }
listless = { workspace = true }
requires = { workspace = true }
shellfish = { workspace = true }
xtyping = { workspace = true }
