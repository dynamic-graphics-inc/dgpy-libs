[tool.poetry]
name = "dgpydev"
version = "0.0.3"
description = "Dynamic Graphics Python libraries"
authors = ["jessekrubin <jesse@dgi.com>"]
license = "MIT"
repository = "https://github.com/dynamic-graphics-inc/dgpy-libs"
homepage = "https://github.com/dynamic-graphics-inc/dgpy-libs"
packages = [{ include = "dgpydev", from = "." }]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed",
]
keywords = ["dgpy", "dgi", "typed", "python3"]

[tool.poetry.dependencies]
python = "^3.8"
aiopen = "*"
asyncify = "*"
dgpylibs = "*"
fmts = "*"
funkify = "*"
h5 = "*"
jsonbourne = "*"
lager = "*"
listless = "*"
requires = "*"
shellfish = "*"
xtyping = "*"
click = "^8.1.3"
rich = "^13.3.3"

[tool.poetry.dev-dependencies]
black = "^23.3.0"
flake8 = "^5.0.4"
h5py = "^3.8.0"
isort = "^5.11.5"
nox = "^2022.11.21"
orjson = "^3.8.9"
pydantic = "^1.10.7"
pytest = "^7.3.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
python-rapidjson = "^1.10"
xdoctest = ">=1.0.1"
click = "^8.1.2"
mypy = "^1.2"

aiopen = { path = "./libs/aiopen/", develop = true }
asyncify = { path = "./libs/asyncify/", develop = true }
fmts = { path = "./libs/fmts/", develop = true }
funkify = { path = "./libs/funkify/", develop = true }
h5 = { path = "./libs/h5/", develop = true }
jsonbourne = { path = "./libs/jsonbourne/", develop = true }
lager = { path = "./libs/lager/", develop = true }
listless = { path = "./libs/listless/", develop = true }
requires = { path = "./libs/requires/", develop = true }
shellfish = { path = "./libs/shellfish/", develop = true }
xtyping = { path = "./libs/xtyping/", develop = true }
dgpylibs = { path = "./libs/dgpylibs/", develop = true }

[tool.poetry.scripts]
dgpydev = "dgpydev.cli:main"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.261"
anyio = { extras = ["trio"], version = "^3.6.2" }
nox = "^2022.11.21"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.black]
line-length = 88
target-version = ['py37', 'py38']
skip-string-normalization = false
include = '\.pyi?$'
exclude = '\.ipynb$'
extend-exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.nox
    | \.nox_win
    | \.nox_lin
    | \.nox_wsl
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | .pytype
  )/
)
'''

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  "--disable-warnings",
]
testpaths = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/funkify",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/requires",
  "libs/shellfish",
  "libs/xtyping",
]

xfail_strict = true
filterwarnings = [
  "error",
  'ignore:"@coroutine" decorator is deprecated since Python 3\.8, use "async def" instead:DeprecationWarning',
  "ignore::RuntimeWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
  "ignore::DeprecationWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "timeout",
  "skip: skip test",
  "anyio: anyio tests",
  "aio: asyncio tests",
  "basic: basic tests",
  "version",
]
# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.mypy]
plugins = [
  "pydantic.mypy",
]
python_version = "3.9"
show_error_codes = true
follow_imports = 'silent'
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
ignore_missing_imports = true
implicit_reexport = false
strict = true
strict_equality = true
show_error_context = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_untyped_defs = false

[tool.pyright]
pythonVersion = "3.8"
include = [
  #    "libs/aiopen",
  "libs/asyncify",
  "libs/funkify",
  "libs/fmts",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  #    "libs/shellfish",
  "libs/listless",
  "libs/xtyping",
]
extraPaths = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/funkify",
  "libs/fmts",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  "libs/shellfish",
  "libs/listless",
  "libs/xtyping",
]
exclude = [
  "**/.pytype",
  "**/node_modules",
  "**/__pycache__",
  "docs",
  "**/.nox",
  "**/.nox_win",
]
reportGeneralTypeIssues = false
reportInvalidTypeVarUse = false
reportMissingImports = true
reportMissingTypeStubs = false

[tool.ruff]
target-version = "py37"
select = [
  "RUF100", # no unused 'noqa' comments
  "E", # pyflakes errors
  "F", # pyflakes warnings
  "B", # bugbear
  "C4", # comprehensions
  "ERA001", # erradicate
  "I", # isort
  "W",
  # "SIM",
  # "PT", # pytest
  "T201", # print
  # pyupgrade
  "UP",
  # pydocstyle
  # "D",
  "D207", # docstring is under-indented
  "D208", # docstring is over-indented
  "D414",
  "D417",
]
line-length = 88

ignore = [
  "B004",
  "B904",
  "C417", # super annoying
  "C901", # too complex
  "E501", # line too long,

  # PYUPGRADE
  "UP004",
  "UP009", # utf-8 encoding declaration (I am supersticious)
  "UP022", # must test shellfish first...
  "UP035", # unnecessary typing-extensions imports... must check xtying...
  "UP037",

  # PYDOCSTYLE
  "D415", # first line should end with a period/exclamation point
]

[tool.ruff.mccabe]
max-complexity = 20

[tool.ruff.per-file-ignores]
"libs/requires/tests/test_requires.py" = [
  "F821", # undefined name; not valid for this test file
]
"libs/requires/tests/test_requires_w_json_libs.py" = [
  "F821", # undefined name; not valid for this test file
]

"libs/shellfish/tests/*" = [
  "D100", # missing docstring
]
"**/noxfile.py" = [
  "D"
]
"**/conftest.py" = [
  "D"
]
"**/test_*.py" = [
  "D1",
  "D102",
  "D103", # missing docstring
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.isort]
combine-as-imports = true
lines-between-types = 1
known-first-party = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "funkify",
  "fmts",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.isort]
combine_as_imports = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
lines_between_types = 1
multi_line_output = 3
profile = "black"
skip_glob = [
  "*/setup.py",
  ".nox*",
  "*/.nox_win/**",
  "*/.pytype/*",
  "*/loguru_tests/*",
]
known_first_party = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "funkify",
  "fmts",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]
