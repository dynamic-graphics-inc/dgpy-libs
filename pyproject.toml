[project]
name = "dgpydev"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "dgpytest",
  "fmts",
  "funkify",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]

[project.optional-dependencies]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.32",
    "mkdocs-jupyter>=0.24.8",
    "mkdocstrings[python]>=0.25.2",
    "markdown-callouts>=0.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "tomli>=2.0.1",
    "mypy>=1.11.1",
    "ruff>=0.6.2",
]

[tool.uv.workspace]
members = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/dgpylibs",
  "libs/dgpytest",
  "libs/fmts",
  "libs/funkify",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  "libs/shellfish",
  "libs/xtyping",
]

[tool.uv.sources]
aiopen = { workspace = true }
asyncify = { workspace = true }
dgpylibs = { workspace = true }
dgpytest = { workspace = true }
fmts = { workspace = true }
funkify = { workspace = true }
h5 = { workspace = true }
jsonbourne = { workspace = true }
lager = { workspace = true }
listless = { workspace = true }
requires = { workspace = true }
shellfish = { workspace = true }
xtyping = { workspace = true }

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  "--disable-warnings",
]
testpaths = [


  # "libs/aiopen",
  # "libs/asyncify",
  # "libs/funkify",
  # "libs/h5",
  # "libs/jsonbourne",
  # "libs/lager",
  # "libs/requires",
  # "libs/shellfish",
  # "libs/xtyping",
]

xfail_strict = true
filterwarnings = [
  "error",
  'ignore:"@coroutine" decorator is deprecated since Python 3\.8, use "async def" instead:DeprecationWarning',
  "ignore::RuntimeWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
  "ignore::DeprecationWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "timeout",
  "skip: skip test",
  "anyio: anyio tests",
  "aio: asyncio tests",
  "basic: basic tests",
  "version",
]
# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.mypy]
plugins = [
  "pydantic.mypy",
]
python_version = "3.8"
show_error_codes = true
follow_imports = 'silent'
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
ignore_missing_imports = true
implicit_reexport = false
strict = true
strict_equality = true
show_error_context = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_untyped_defs = false

[tool.pyright]
pythonVersion = "3.8"
include = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/dgpylibs",
  "libs/dgpytest",
  "libs/fmts",
  "libs/funkify",
  "libs/h5",
  "libs/jsonbourne/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  #    "libs/shellfish",
  "libs/listless",
  "libs/xtyping",
]
extraPaths = [
  "libs/aiopen",
  "libs/asyncify",
  "libs/funkify",
  "libs/fmts",
  "libs/h5",
  "libs/jsonbourne",
  "libs/lager",
  "libs/listless",
  "libs/requires",
  "libs/shellfish",
  "libs/listless",
  "libs/xtyping",
]
exclude = [
  "**/.pytype",
  "**/node_modules",
  "**/__pycache__",
  "docs",
  "**/.venv",
  "**/.nox",
  "**/.nox_win",
]
reportGeneralTypeIssues = false
reportInvalidTypeVarUse = false
reportMissingImports = true
reportMissingTypeStubs = false

[tool.ruff]
target-version = "py38"

line-length = 88

[tool.ruff.lint]
preview = true
select = [
  "RUF100", # no unused 'noqa' comments
  "RUF022",
  "E", # pyflakes errors
  "F", # pyflakes warnings
  "B", # bugbear
  "C4", # comprehensions
  "ERA001", # erradicate
  "I", # isort
  "W",
  # "SIM",
  # "PT", # pytest
  "T201", # print
  # pyupgrade
  "UP",
  # pydocstyle
  # "D",
  "D207", # docstring is under-indented
  "D208", # docstring is over-indented
  "D414",
  "D417",
  # flake8-simplify (SIM)
  "SIM",

  # pie (PIE)
  "PIE",
]

ignore = [
  # "B004",
  # "B904",
  "C417", # super annoying
  "C901", # too complex
  "E501", # line too long,
  "E266", # too many leading '#' for block comment

  # PYUPGRADE
  # keep runtime typing
  "UP007",
  "UP006",

  "UP009", # utf-8 encoding declaration (I am supersticious)
  "UP022", # must test shellfish first...
  "UP035", # unnecessary typing-extensions imports... must check xtying...
  "UP037",
  # PYDOCSTYLE
  "D415", # first line should end with a period/exclamation point

  # flake8-simplify (SIM)
  "SIM115", # open-file-with-context-handler
  "SIM105", # suppressible-exception
  # PIE
  "PIE804", # unnecessary-dict-kwargs -- TODO: revisit?
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.per-file-ignores]
"libs/requires/tests/test_requires.py" = [
  "F821", # undefined name; not valid for this test file
]
"libs/requires/tests/test_requires_w_json_libs.py" = [
  "F821", # undefined name; not valid for this test file
]

"libs/shellfish/tests/*" = [
  "D100", # missing docstring
]
"**/noxfile.py" = [
  "D",
]
"**/conftest.py" = [
  "D",
]
"**/test_*.py" = [
  "D1",
  "D102",
  "D103", # missing docstring
]

"libs/jsonbourne/src/jsonbourne/trydantic.py" = [
  "I001", # isort something wrong with in try block import
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
lines-between-types = 1
lines-after-imports = -1
known-first-party = [
  "aiopen",
  "asyncify",
  "dgpylibs",
  "dgpytest",
  "fmts",
  "funkify",
  "h5",
  "jsonbourne",
  "lager",
  "listless",
  "requires",
  "shellfish",
  "xtyping",
]

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.codespell]
skip = "*/.nox/*,*/.nox_win/*,*/.pytype/*,*/.mypy_cache/*,*/.venv/*,*/node_modules/*,./poetry.lock"
ignore-words-list = "opps,te"
