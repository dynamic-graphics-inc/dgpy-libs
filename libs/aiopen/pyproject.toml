[tool.poetry]
name = "aiopen"
version = "0.5.5"
description = "Async file io"
license = "MIT"
authors = ["jesse <jesse@dgi.com>"]
repository = "https://github.com/dynamic-graphics-inc/dgpy-libs"
homepage = "https://github.com/dynamic-graphics-inc/dgpy-libs/tree/main/libs/aiopen"
readme = 'README.md'
packages = [
  { include = "aiopen", from = "." },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Typing :: Typed",
]
keywords = [
  "anyio",
  "fs",
  "aiopen",
  "async",
  "dgpy",
]

[tool.poetry.dependencies]
python = "^3.7"
funkify = "^0.4.0"
xtyping = ">=0.5.0"

[tool.poetry.dev-dependencies]
pytest = "^7.3.1"
# pytest = "^7.1.2"
pytest-asyncio = "^0.21.0"
anyio = { extras = ["trio"], version = "^3.6.2" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  "--disable-warnings",
  "--cov-config=pyproject.toml",
  "--ignore-glob=*/_meta.py",
]
xfail_strict = true
filterwarnings = [
  "error",
  'ignore:"@coroutine" decorator is deprecated since Python 3\.8, use "async def" instead:DeprecationWarning',
  "ignore::RuntimeWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
markers = ["asyncio", "anyio", "version"]
testpaths = ["aiopen", "tests"]

[tool.mypy]
# --strict
disallow_any_generics = false
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = true
ignore_missing_imports = true
implicit_reexport = false
strict_equality = true
# --strict end

[tool.ruff]
extend = "../../pyproject.toml"

# COVERAGE
[tool.coverage.run]
source = ['aiopen']
branch = true
context = '${CONTEXT}'
omit = ["**/__main__.py"]

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
  'pragma: no cover',
  'raise NotImplementedError',
  'if TYPE_CHECKING:',
  '@overload',
  '\(Protocol\):$',
  'if 0:',
  'if False:',
  'class AsyncBase:',
]

[tool.coverage.paths]
source = ['aiopen/']
