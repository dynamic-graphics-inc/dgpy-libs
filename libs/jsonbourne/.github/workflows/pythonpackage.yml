name: Python package

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest nox
      - name: Lint with flake8
        run: |
          nox -s flake

  build:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - ubuntu
        python-version: [3.6, 3.7, 3.8, 'pypy3']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest nox
      - name: Test with pytest
        run: |
          nox -k test
#      - name: list dist files
#        run: |
#          ${{ matrix.ls || 'ls -lh' }} dist/
#          twine check dist/*
#      - name: Store dist artifacts
#        uses: actions/upload-artifact@v1
#        with:
#          name: pypi_files
#          path: dist

  deploy:
    name: Deploy
    needs: build
    if: "success() && (startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'v'))"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry
      - name: Build dist
        run: |
          python -m poetry publish --build -u ${{ secrets.SHELDON_PYPI_UNAME }} -p ${{ secrets.SHELDON_PYPI_PWORD }}
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          python -m poetry build
          zip -r jsonbourne-${{ github.ref }}.zip dist
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./jsonbourne-${{ github.ref }}.zip
          asset_name: jsonbourne-${{ github.ref }}.zip
          asset_content_type: application/zip
