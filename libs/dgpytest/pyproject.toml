[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "dgpytest"
version = "0.0.4"
description = "dgpytest = dgpy + pytest"
readme = "README.md"
keywords = [ "dgpy", "plugin", "pytest", "typed" ]
authors = [ { name = "jesse", email = "jesse@dgi.com" } ]
requires-python = ">=3.9,<4.0"

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Private :: Do Not Upload",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed",
]
dependencies = [ "pytest>=7.2.2", "pytest-asyncio>=0.21,<0.24" ]
entry-points.pytest11.dgpytest = "dgpytest.plugin"

[tool.hatch]
[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = [ "src/dgpytest" ]

[tool.hatch.build.targets.sdist]
include = [
  "src",
  "pyproject.toml",
  "README.md",
  "LICENSE",
]

[tool.ruff]
extend = "../../pyproject.toml"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--strict-config",
  "--strict-markers",
  "--doctest-modules",
  "--disable-warnings",
  "--ignore-glob=*/_meta.py",
]
xfail_strict = true
filterwarnings = [
  "error",
  'ignore:"@coroutine" decorator is deprecated since Python 3\.8, use "async def" instead:DeprecationWarning',
  "ignore::RuntimeWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "timeout",
]

[tool.coverage.run]
branch = true
source = [ 'dgpytest' ]
omit = [
  '_meta.py',
]

[tool.coverage.report]
precision = 2
show_missing = true
# Regexes for lines to exclude from consideration
exclude_lines = [
  '@overload',
  # Re-enable the standard pragma (with extra strictness)
  '# pragma: no cover\b',
  # Code for static type checkers
  'if TYPE_CHECKING:',
  # Scripts
  'if __name__ == .__main__.:',
  'if 0:',
  'if sys.version_info < (3, 7):',
  'if sys.version_info >= (3, 8):',
  'pragma: no cover',
  'pragma: nocov',
]

[tool]
