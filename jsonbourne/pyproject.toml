[tool.poetry]
name = "jsonbourne"
version = "0.5.0"
description = "JSON not json"
license = "MIT"
authors = ["jesse <jesse@dgi.com>"]
repository = "https://github.com/dynamic-graphics-inc/jsonbourne"
packages = [
    { include = "jsonbourne", from = "." },
    { include = "JSON.py", from = "." },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Typing :: Typed"
]
keywords = [
    "json", "python", "jsonbourne", "pydantic", "orjson", "rapidjson",
    "python-rapidjson", "mattdamon"
]


[tool.poetry.dependencies]
python = "==3.*,>=3.6.1"
pydantic = {version = "==1.*,>=1.5.0", optional = true}
python-rapidjson = {version = "==0.*,>=0.9.1", optional = true}
orjson = {version = "==3.*,>=3.0.0", optional = true}

[tool.poetry.dev-dependencies]
pytest = "==5.*,>=5.3.0"

[tool.poetry.extras]
rec = ["orjson"]
rj = ["python-rapidjson"]
oj = ["orjson"]
rapidjson = ["python-rapidjson"]
orjson = ["orjson"]
pydantic = ["pydantic"]
full = ["orjson", "pydantic", "python-rapidjson"]




[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "setuppy", path = "setup.py"}
# explicitly specify your versioning scheme to let your users know what they can expect
versioning = "semver"
# git tag template for releases
tag = "v"

[tool.dephell.vendorized]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "wheel", path = "dist-vendored/"}
envs = ["main"]

# Make vendorized version of the project:
# dephell vendor download --env=vendorized
# dephell vendor import --env=vendorized
[tool.dephell.vendorized.vendor]
path = "dephell_vendor"
exclude = ["jinja2", "tests", "setuptools", "pip"]
[tool.black]
line-length = 88
target_version = ['py37']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.nox
    | \.nox_win
    | \.nox_lin
    | \.nox_wsl
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================

[tool.isort]
line_length = 88
force_single_line = false
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
multi_line_output = 3
skip_glob = ["*/setup.py", ".nox*"]
known_first_party = "dgpy"
known_third_party = [
    "pytest",
]
force_grid_wrap=0
combine_as_imports = true
use_parentheses = true
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

# =============================================================================
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
# =============================================================================
#  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\  /\
# /  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \/  \
# =============================================================================
# \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# =============================================================================
